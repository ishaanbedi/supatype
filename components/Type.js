/* eslint-disable react-hooks/rules-of-hooks */
import Head from "next/head"
import Link from "next/link"
import { useRouter } from 'next/router'
import React, { useRef, useState, useEffect } from "react"
const getCloud = () => `apple oneplus motorola`.split(" ")
import Timer from '../components/Timer'
import Word from '../components/Word'
import { supabase } from '../utils/supabaseClient'

function startTypeNotSignedIn(props) {
    return (
        <>
            <Head>
                <title>Not Signed In : SupaType</title>
                <meta name="description" content="Generated by create next app" />
                <link rel="icon" href="/favicon.ico" />
            </Head>
            <section>
                <section className="text-white bg-[#1B2430] min-h-screen">
                    <div className="max-w-screen-xl px-4 py-32 mx-auto lg:h-screen lg:items-center lg:flex">
                        <div className="max-w-3xl mx-auto text-center">
                            <h1 className="text-3xl font-extrabold text-transparent sm:text-5xl bg-clip-text bg-gradient-to-r from-[#D6D5A8] to-[#816797]">
                                Oops! You are not signed in.
                            </h1>
                            <div className="flex flex-wrap justify-center gap-4 mt-8">
                                <Link href='/profile'>
                                    <a className="block w-full px-12 py-3 text-sm font-medium text-white bg-[#816797] border border-[#816797] rounded sm:w-auto active:text-opacity-75 hover:bg-transparent hover:text-white focus:outline-none focus:ring">
                                        Sign In
                                    </a>
                                </Link>
                                <Link href='/'>
                                    <a className="block w-full px-12 py-3 text-sm font-medium text-white border border-[#816797] rounded sm:w-auto hover:bg-[#816797] active:bg-[#51557E] focus:outline-none focus:ring">
                                        Home
                                    </a>
                                </Link>
                            </div>
                        </div>
                    </div>
                </section>
            </section>
        </>
    )
}
function startTypeSignedIn(props) {
    const [loading, setLoading] = useState(true)
    async function updateProfile() {

        var completedTestsLocal;
        var bestRecordLocal;
        var totalScoreLocal;
        var scoresArrayLocal = [];

        try {
            setLoading(true)
            const user = supabase.auth.user()
            let { data, error, status } = await supabase
                .from('profiles')
                .select(`username, totalScore, bestRecord, completedTests, scoresArray`)
                .eq('id', user.id)
                .single()
            if (error && status !== 406) {
                throw error
            }
            if (data) {
                totalScoreLocal = data.totalScore
                bestRecordLocal = data.bestRecord
                completedTestsLocal = data.completedTests
                scoresArrayLocal = data.scoresArray

            }
        } catch (error) {
            alert(error.message)
        } finally {
            setLoading(false)
        }
        try {
            setLoading(true)
            const user = supabase.auth.user()
            scoresArrayLocal.push(parseInt(document.querySelector('.timeElapsedSpan').innerHTML))
            if (bestRecordLocal < document.querySelector('.timeElapsedSpan').innerHTML) {
                bestRecordLocal = document.querySelector('.timeElapsedSpan').innerHTML;
            }

            const updates = {
                id: user.id,
                totalScore: (totalScoreLocal + parseInt(document.querySelector('.timeElapsedSpan').innerHTML)),
                completedTests: (completedTestsLocal + 1),
                bestRecord: bestRecordLocal,
                scoresArray: scoresArrayLocal,
                updated_at: new Date(),
            }
            let { error } = await supabase.from('profiles').upsert(updates, {
                returning: 'minimal'
            })

            if (error) {
                throw error
            }
        } catch (error) {
            alert(error.message)
        } finally {
            setLoading(false)
        }
    }
    const [session, setSession] = useState(null)
    const router = useRouter()

    useEffect(() => {
        setSession(supabase.auth.session())

        supabase.auth.onAuthStateChange((_event, session) => {
            setSession(session)
        })
    }, [])
    const [startCounting, setStartCounting] = useState(false);
    const [userInput, setUserInput] = useState("");
    const cloud = useRef(getCloud())
    const [activeWordIndex, setActiveWordIndex] = useState(0);
    const [correctWordArray, setCorrectWordArray] = useState([]);
    var processInput = (value) => {
        if (activeWordIndex === cloud.current.length) {
            return
        }
        if (!startCounting) {
            setStartCounting(true)
        }

        if (value.endsWith(" ")) {
            if (activeWordIndex === cloud.current.length - 1) {
                setStartCounting(false)
                setUserInput("Completed")
                updateProfile();
            }
            else {
                setUserInput('')
            }
            setActiveWordIndex(index => index + 1)
            setCorrectWordArray(data => {
                const word = value.trim()
                const newResult = [...data]
                newResult[activeWordIndex] = word === cloud.current[activeWordIndex]
                return newResult
            })
        }
        else {
            setUserInput(value)
        }
    }
    return (
        <>
            <Head>
                <title>New Typing Session : SupaType</title>
                <meta name="description" content="Generated by create next app" />
                <link rel="icon" href="/favicon.ico" />
            </Head>
            <section className='min-h-screen md:block bg-[#1B2430]'>

                <h1 className="text-[#D6D5A8] text-center text-3xl font-bold py-12">SupaType</h1>
                <div className="px-12 my-4">

                    <h1 className="text-white text-2xl">
                        <Timer
                            startCounting={startCounting}
                            correctWords={correctWordArray.filter(Boolean).length}
                        />
                    </h1>
                    <div className="word-ribbon-bar bg-[#51557E]/50 rounded-lg lg:text-4xl md:text-3xl sm:text-xl text-2xl  my-8 mb-8 text-center">
                        <p className="text-white py-8">
                            {cloud.current.map((word, index) => {
                                return <Word
                                    text={word}
                                    key={index}
                                    active={index === activeWordIndex}
                                    correct={correctWordArray[index]}
                                />
                            })}
                        </p>
                    </div>
                </div>
                <div className="word-ribbon-input text-center w-full px-12">
                    <div className="relative">
                        <input
                            className="w-full py-3 mt-12 text-sm border-2 border-gray-200 rounded"
                            type="text"
                            placeholder="Start typing here..."
                            value={userInput}
                            onChange={(e) => processInput(e.target.value)}
                        />
                    </div>
                </div>
                <div className='my-4 space-x-4 text-center'>

                    <button className="relative inline-flex items-center px-8 py-3 overflow-hidden text-white bg-[#51557E] rounded group active:bg-[#51557E]/50 focus:outline-none focus:ring"
                        onClick={() => { router.reload(window.location.pathname) }}
                    >
                        <span className="absolute right-0 transition-transform translate-x-full group-hover:-translate-x-4">
                            <svg xmlns="http://www.w3.org/2000/svg" className="h-6 w-6" fill="none" viewBox="0 0 24 24" stroke="currentColor" strokeWidth="2">
                                <path strokeLinecap="round" strokeLinejoin="round" d="M4 4v5h.582m15.356 2A8.001 8.001 0 004.582 9m0 0H9m11 11v-5h-.581m0 0a8.003 8.003 0 01-15.357-2m15.357 2H15" />
                            </svg>
                        </span>
                        <span className="text-sm font-medium transition-all group-hover:mr-4">
                            Restart
                        </span>
                    </button>
                    <Link href='/'>
                        <button
                            className="relative inline-flex items-center px-8 py-3 mt-2 overflow-hidden text-white border border-current rounded group active:text-indigo-500 focus:outline-none focus:ring" href="/download"
                        >
                            <span className="absolute right-0 transition-transform translate-x-full group-hover:-translate-x-4">
                                <svg xmlns="http://www.w3.org/2000/svg" className="h-6 w-6" fill="none" viewBox="0 0 24 24" stroke="currentColor" strokeWidth="2">
                                    <path strokeLinecap="round" strokeLinejoin="round" d="M3 12l2-2m0 0l7-7 7 7M5 10v10a1 1 0 001 1h3m10-11l2 2m-2-2v10a1 1 0 01-1 1h-3m-6 0a1 1 0 001-1v-4a1 1 0 011-1h2a1 1 0 011 1v4a1 1 0 001 1m-6 0h6" />
                                </svg>
                            </span>

                            <span className="text-sm font-medium transition-all group-hover:mr-4">
                                Home
                            </span>
                        </button>
                    </Link>
                </div>
            </section>
        </>
    )
}

function Type(props) {
    if (props.signedIn === true) {
        return startTypeSignedIn()
    }
    else {
        return startTypeNotSignedIn()
    }
}
export default Type